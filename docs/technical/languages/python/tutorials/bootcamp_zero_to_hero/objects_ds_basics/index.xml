<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objects_ds_basics on Manoj Documentation</title>
    <link>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/</link>
    <description>Recent content in Objects_ds_basics on Manoj Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Dec 2018 12:48:55 +0530</lastBuildDate>
    
	<atom:link href="/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Numbers</title>
      <link>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/numbers/</link>
      <pubDate>Thu, 06 Dec 2018 12:51:16 +0530</pubDate>
      
      <guid>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/numbers/</guid>
      <description>Numbers  lot of types of numbers in python
 like integers : 1 ,3, 2 floating point numbers : 2.1, -1.23 , 4E2  In python 2, it does classic division means decimal points gets truncated off
  3/2 = 1  How can we make it do true division ,
 atleast make sure one is floating point number   3.0/2 = 1.5 3/2.0 = 1.</description>
    </item>
    
    <item>
      <title>Strings</title>
      <link>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/strings/</link>
      <pubDate>Thu, 06 Dec 2018 07:25:29 +0000</pubDate>
      
      <guid>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/strings/</guid>
      <description>You can create by single quotes &#39;&#39; or double quotes &amp;quot;&amp;quot; It treates everything in a sentence as sequence Means &amp;ldquo;Manoj Kumar&amp;rdquo; every letter is a part of a sequence so that we can use indexing and slicing we can also have &amp;quot;Manoj last name is &#39;kumar&#39; &amp;quot; we can do the opposite &#39;Manoj last name is &amp;quot;kumar&amp;quot;&#39; we can display it using print statement eg : print &amp;quot;Manoj&amp;quot; we can ask for new line symbol as \n like that we can have different characters such as \t   python 2 vs python 3</description>
    </item>
    
    <item>
      <title>Print_format</title>
      <link>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/print_format/</link>
      <pubDate>Thu, 06 Dec 2018 15:39:07 +0530</pubDate>
      
      <guid>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/print_format/</guid>
      <description>python 2  print statement is used to print the strings - Print a string
print &amp;#34;Manoj Kumar&amp;#34;  Print a string vaiable along with a string  a= &amp;#34;manoj&amp;#34; print &amp;#34;My name is %s&amp;#34; %(a)  Print a floating point variable  a= 1.233 print &amp;#34;My name is %1.2f&amp;#34; %(a)  In 1.2f 2 is how many numbers to show past the decimal if you make 2 as 10 it will fill rest of absent decimals with 0 1 is the total number of minimum digits that string should contain Suppose if you make 1 to 10 it will fill rest of the spaces with whitespaces  a= 1.</description>
    </item>
    
    <item>
      <title>Lists</title>
      <link>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/lists/</link>
      <pubDate>Thu, 06 Dec 2018 17:07:15 +0530</pubDate>
      
      <guid>/doc/technical/languages/python/tutorials/bootcamp_zero_to_hero/objects_ds_basics/lists/</guid>
      <description>Strings are types of sequence in python lists are more generalised version of sequence lists are constructed with sqaure brackets and each element is seperated with commas  my_list = [1,2,3]  this is a list of integers lists can hold a different kind of object TypeScript  my_list = [1,&amp;#34;string&amp;#34;,3.341] ##Functions
 just like strings they have a length Length of a list  len([1,&amp;#34;string&amp;#34;,3.341])  Indexing and Slicing a = [&amp;#34;one&amp;#34;,1,2,3] a[1] #output 1 a[1:] # take everything from index - 1 a[:3] # take everything upto index - 3 (excluding 3)  You can concatenate lists like strings  [1,2,3]+[&amp;#34;one&amp;#34;,&amp;#34;two&amp;#34;,&amp;#34;three&amp;#34;]  You can repeat the lists using muliplication just like strings  ([1,2,3]+[&amp;#34;one&amp;#34;,&amp;#34;two&amp;#34;,&amp;#34;three&amp;#34;])*2  list can grow as long as we want they have no type constraint  Methods  append  [1,2,3].</description>
    </item>
    
  </channel>
</rss>